/* Calculates the height and kind of perturbed terrain given:
 *
 * XYX:vector*3  location on sphere
 * LONGITUDE, LATITUDE, BEARING, AZIMUTH camera position
 * RADIUS        normalised radius of planet
 * SEALEVEL      sealevel delta from geoid
 *
 * SEA(XYZ)      returns sealevel at this point
 * TERRAIN(XYZ)  returns real terrain height
 * GEOID(XYZ)    returns geoid height
 * SLOPE(XYZ)    returns slope of *real* (unperturbed) terrain
 *
 * PERLIN(XYZ)   some perlin noise
 * MULTIFRACTAL(XYZ, freq, laq, oct) multifractal noise
 *
 * Returns:
 * 
 * height        height of perturbed terrain above core
 *
 * All distances are kilometres.
 */

let max(x: real, y: real): real =
	if (x < y) then y else x;

let stockheight = TERRAIN(XYZ);
let water = SEA(XYZ);
let slope = SLOPE(XYZ);
let height = stockheight - water;

/* Don't bother rendering anything below this level --- the ocean floor
 * underwater is flat. */
let lowtide = water - 0.5;

let easecurve(x) =
	(x*x) / (x*x + (1-x)*(1-x));

let blend0lo(x, lo, hi) =
	if (x < lo) then 0
	else if (x < hi) then
		easecurve((x-lo) / (hi-lo))
	else
		1;

let blend0hi(x, lo, hi) =
	if (x < lo) then 1
	else if (x < hi) then
		1 - easecurve((x-lo) / (hi-lo))
	else
		0;

let blend2(x, lo1, hi1, hi2, lo2) =
	if (x < lo1) then 0
	else if (x > lo2) then 0
	else if (x < hi1) then
		easecurve((x-lo1) / (hi1-lo1))
	else if (x > hi2) then
		easecurve((lo2-x) / (lo2-hi2))
	else
		1;

let pand(x, y) = x * y;
let por(x, y) = x + y - pand(x, y);

let craggy =
	MULTIFRACTAL(XYZ*2, 1, 2, 6)*0.02 *
		por(
			blend0lo(slope, 0.1, 0.3),
			blend0hi(height, -0.040, 0.000)
		)
	;
	
let perturbedheight = stockheight
	+ PERLIN(XYZ*10)*0.005
	+ craggy;

max(lowtide, perturbedheight)

