/* Calculates the texture to apply to terrain.
 *
 * XYX:vector*3  location on sphere
 * LONGITUDE, LATITUDE, BEARING, AZIMUTH camera position
 * RADIUS        normalised radius of planet
 * SEALEVEL      sealevel delta from geoid
 * SEA(XYZ)      returns sealevel at this point
 * TERRAIN(XYZ)  returns real terrain height
 * GEOID(XYZ)    returns geoid height
 * PERLIN(XYZ)   some perlin noise
 * MULTIFRACTAL(XYZ, freq, laq, oct) multifractal noise
 *
 * Returns:
 * 
 * U, V          u/v coordinates to pass to Povray
 *
 * All distances are kilometres.
 */

let max(x: real, y: real): real =
	if (x < y) then y else x
in

let stockheight = TERRAIN(XYZ) in
let water = SEA(XYZ) in
let slope = SLOPE(XYZ) in
let height = stockheight - water in

let U = height in
let V = slope in
return

