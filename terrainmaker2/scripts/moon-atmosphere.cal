// Standard definitions.

let PI = 3.1415926535898 in

let dot(x: vector*3, y: vector*3): real =
	(x*y).sum in

let magnitude(x: vector*3): real =
	sqrt(dot(x, x)) in

// Okay, Rayleigh scattering. For the scattering and extinction
// factors:
//
//                       8 * pi^3 * (n^2 - 1)^2       -h
//  betas_r(h, lambda) = ---------------------- * exp(--)
//                            3*N*lambda^4            Hr
//
//  betae_r(h, lambda) = betas_r(h, lambda)
//
// h: height above sea level
// Hr: scale height
// lambda: wavelength of light
// n: index of refraction of air
// N: density at sea level
// 
// And for the phase:
// 
//              3
//  P_r(mu) = ----- * (1 + mu^2)
//            16*pi
//
// mu: cos of angle between sun and camera.
//
// The final emitted light and extinction factors are:
//
//  (input * betas_r * P_r)
//  betae_r
//
// We simplify this to:
//
//  input * expfactor * betas_r_without_exp * P_r
//  expfactor * betae_r_without_exp
//
// beta_r_without_exp and beta_m_without_exp end up being constants.
//
// Easy, right? Ha.

// Arbitrary scaling factor for atmospheric thickness.
let density = 0.5 in

let betas_r_without_exp = [5.5e-6, 13.0e-6, 22.4e-6] in // metres^-1
let betae_r_without_exp = betas_r_without_exp in
let mu = dot(camera_direction, sun_direction) in
let altitude = magnitude(xyz) - nominal_radius in
let scaleAltitude = 25e3 in // metres
let atmosphereHeight = bounding_radius - nominal_radius in

let expfactor = density * exp(-altitude / scaleAltitude) in

let phase_r =
	(3/16*PI) * (1 + mu*mu) in

// Final output.
let emission = sun_colour * betas_r_without_exp*phase_r * expfactor in
let extinction = betae_r_without_exp * expfactor in

return

